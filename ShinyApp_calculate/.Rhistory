air.pollution[i,]$res.sh <- "Состояние воздуха: Превышение разовых нормативов"
} else if(air.pollution[i,]$result == "По отдельным веществам в атмосферном воздухе выявлены повышенные среднесуточные концентрации загрязняющих веществ") {
air.pollution[i,]$res.sh <- "Состояние воздуха: Повышенные суточные концентрации"
} else if(air.pollution[i,]$result == "По отдельным веществам в атмосферном воздухе выявлены повышенные максимальные разовые концентрации загрязняющих веществ") {
air.pollution[i,]$res.sh <- "Состояние воздуха: Повышенные разовые концентрации"
}
}
air.pollution <- air.pollution[!duplicated(air.pollution$address),]
air.pollution_bad <- subset(air.pollution, res.sh != "Состояние воздуха: Норма")
air.pollution_bad <- select(air.pollution_bad, ID, adm.area, district, address, longitude, latitude, res.sh) %>%
rename(results = res.sh) %>%
mutate(data = "Загрязнение воздуха")
View(air.pollution_bad)
comb.data <- rbind(air.pollution_bad, soil.pollution_bad, parks_cl_bad)
comb.data$data <- as.factor(comb.data$data)
library(ggmap)
library(Hmisc)
map <- get_map(location=c(37.617300,55.755826), zoom=10, maptype="terrain")
pollumap <- ggmap(map, base_layer = ggplot(aes(x=longitude, y=latitude), data = comb.data))
png("D:/Sync/R/networks/TW/pollution_plot.png", width = 3000, height = 2200, res = 300)
pollumap + geom_point(aes(col = results, shape = data, group = data), size = 6, data = comb.data) +
scale_color_brewer(type = "qual",palette = 2)
dev.off()
map <- get_map(location=c(37.617300,55.755826), zoom=11, maptype="terrain")
pollumap <- ggmap(map, base_layer = ggplot(aes(x=longitude, y=latitude), data = comb.data))
png("D:/Sync/R/networks/TW/pollution_plot.png", width = 3000, height = 2200, res = 300)
pollumap + geom_point(aes(col = results, shape = data, group = data), size = 6, data = comb.data) +
scale_color_brewer(type = "qual",palette = 2)
dev.off()
map <- get_map(location=c(37.617300,55.755826), zoom=10.5, maptype="terrain")
map <- get_map(location=c(37.617300,55.755826), zoom=10, maptype="terrain")
pollumap <- ggmap(map, base_layer = ggplot(aes(x=longitude, y=latitude), data = comb.data))
png("D:/Sync/R/networks/TW/pollution_plot.png", width = 3000, height = 2200, res = 300)
pollumap + geom_point(aes(col = results, shape = data, group = data), size = 5, data = comb.data) +
scale_color_brewer(type = "qual",palette = 2)
dev.off()
png("D:/Sync/R/networks/TW/pollution_plot.png", width = 3000, height = 2200, res = 300)
pollumap + geom_point(aes(col = results, shape = data, group = data), size = 5, data = comb.data) +
scale_color_brewer(type = "qual",palette = 2) + labs(data = "Тип данных", result = "Значение")
dev.off()
png("D:/Sync/R/networks/TW/pollution_plot.png", width = 3000, height = 2200, res = 300)
pollumap + geom_point(aes(col = results, shape = data, group = data), size = 5, data = comb.data) +
scale_color_brewer(type = "qual",palette = 2) + labs(data = "Тип данных", results = "Значение")
dev.off()
png("D:/Sync/R/networks/TW/pollution_plot.png", width = 3000, height = 2200, res = 300)
pollumap + geom_point(aes(col = results, shape = data, group = data), size = 5, data = comb.data) +
scale_color_brewer(type = "qual",palette = 2) + labs(shape = "Тип данных", fill = "Значение")
dev.off()
png("D:/Sync/R/networks/TW/pollution_plot.png", width = 3000, height = 2200, res = 300)
pollumap + geom_point(aes(col = results, shape = data, group = data), size = 5, data = comb.data) +
scale_color_brewer(type = "qual",palette = 2) + labs(shape = "Тип данных", colour = "Значение")
dev.off()
air.pollution$res.sh <- NA
for(i in 1:nrow(air.pollution)) {
if(air.pollution[i,]$result == "Содержание загрязняющих веществ в атмосферном воздухе на жилой территории не превысило предельно допустимых среднесуточных нормативов"|air.pollution[i,]$result == "Содержание загрязняющих веществ в атмосферном воздухе на жилой территории не превысило предельно допустимых максимальных разовых нормативов") {
air.pollution[i,]$res.sh <- "состояние воздуха: Норма"
} else if(air.pollution[i,]$result == "По отдельным веществам в атмосферном воздухе выявлены превышения предельно допустимых максимальных разовых нормативов") {
air.pollution[i,]$res.sh <- "состояние воздуха: Превышение разовых нормативов"
} else if(air.pollution[i,]$result == "По отдельным веществам в атмосферном воздухе выявлены повышенные среднесуточные концентрации загрязняющих веществ") {
air.pollution[i,]$res.sh <- "состояние воздуха: Повышенные суточные концентрации"
} else if(air.pollution[i,]$result == "По отдельным веществам в атмосферном воздухе выявлены повышенные максимальные разовые концентрации загрязняющих веществ") {
air.pollution[i,]$res.sh <- "состояние воздуха: Повышенные разовые концентрации"
}
}
air.pollution <- air.pollution[!duplicated(air.pollution$address),]
air.pollution_bad <- subset(air.pollution, res.sh != "состояние воздуха: Норма")
air.pollution_bad <- select(air.pollution_bad, ID, adm.area, district, address, longitude, latitude, res.sh) %>%
rename(results = res.sh) %>%
mutate(data = "Загрязнение воздуха")
comb.data <- rbind(air.pollution_bad, soil.pollution_bad, parks_cl_bad)
comb.data$data <- as.factor(comb.data$data)
png("D:/Sync/R/networks/TW/pollution_plot.png", width = 3000, height = 2200, res = 300)
pollumap + geom_point(aes(col = results, shape = data, group = data), size = 5, data = comb.data) +
scale_color_brewer(type = "qual",palette = 2) + labs(shape = "Тип данных", colour = "Значение")
dev.off()
View(agenda_sh)
View(agenda)
View(soil.pollution_bad)
View(comb.data)
apiKey <- "nwGAf5EXNXJ7zxU86cn1amLuY"
apiSecret <- "rJZCAJSIbutGuiaDhO3FgTrw2nwDOFyQEhH5Le0bi6fRliUxk5"
library(httr)
library(xlsx)
library(plyr)
library(dplyr)
library(jsonlite)
library(stringr)
library(lubridate)
library(gdata)
library(curl)
twapp <- oauth_app("parse_get_info", apiKey, apiSecret)
twapp <- oauth_app("parse_get_info", apiKey, apiSecret)
tw_token <- oauth2.0_token(oauth_endpoints("twitter"), twapp)
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth2.0_token(oauth_endpoints("twitter"), twapp)
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth2.0_token(oauth_endpoints("twitter"), twapp)
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth2.0_token(oauth_endpoints("twitter"), twapp, scope = "offline", type = "application/x-www-form-urlencoded", cache = FALSE)
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth2.0_token(oauth_endpoints("twitter"), twapp, scope = "offline", type = "application/x-www-form-urlencoded", cache = FALSE)
access_token <- "114297502-BXqpFuIqdJ6mqRqfDLEEEXtZljoa6enN9m4sHC53"
token_secret <- "1F0t7xFfFy7ofkjZQyEIwbLKA0EZoemihDI1f6fI2kVFV"
twapp <- oauth_app("twappinfo", access_token, token_secret)
tw_token <- oauth2.0_token(oauth_endpoints("twitter"), twapp, scope = "offline", type = "application/x-www-form-urlencoded", cache = FALSE)
tw_token <- oauth2.0_token(oauth_endpoints("twitter"), twapp, type = "application/x-www-form-urlencoded", cache = FALSE)
tw_token <- oauth2.0_token(oauth_endpoints("twitter"), twapp)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
tw_token <- oauth2.0_token(oauth_endpoints("twitter"), twapp)
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth2.0_token(oauth_endpoints("twitter"), twapp)
twapp <- oauth_app("twappinfo", access_token, token_secret)
tw_token <- oauth2.0_token(oauth_endpoints("twitter"), twapp)
twapp <- oauth_app("twappinfo", access_token, token_secret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
twapp <- oauth_app("twappinfo", access_token, token_secret, access_token, token_secret)
twapp <- oauth_app("twappinfo", access_token, token_secret)
oauth2.0_token(oauth_endpoints("twitter"), twapp)
twapp <- oauth_app("twappinfo", access_token, token_secret)
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
library(twitteR)
library(httr)
library(RCurl)
library(ggplot2)
library(plyr)
library(dplyr)
library(ggmap)
library(reshape2)
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
apiSecret <- "HWSIAhl6sYWqkFxfCZFIaHttyRXt6iy9Ikhp1FVOPIhAKD0tM6"
apiKey <- "5ijhfi2ALa8JNCUp4Cd4Ntbxs"
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
apiKey <- "5ijhfi2ALa8JNCUp4Cd4Ntbxs"
apiSecret <- "HWSIAhl6sYWqkFxfCZFIaHttyRXt6iy9Ikhp1FVOPIhAKD0tM6"
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
twapp <- oauth_app("twappinfo", access_token, access_token_secret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
tw_token
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = twitter_token))
req <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",
config(token = tw_token)
)
req$url
req$content[[1]]
twitter_token <- config(token=tw_token)
req <- with_config(twitter_token, GET("https://api.twitter.com/1.1/search/tweets.json?q=%23запарк"))
req <- with_config(twitter_token, GET("https://api.twitter.com/1.1/search/tweets.json?q=%23запарк"))
req$url
?GET
x <- "https://api.twitter.com/1.1/search/tweets.json?q=%23запарк"
Encoding(x) <- "UTF-8"
x
Encoding(x) <- "cp1251"
x
iconv(x, "cp1251", "UTF-8")
req <- with_config(twitter_token, GET(iconv("https://api.twitter.com/1.1/search/tweets.json?q=%23запарк", "cp1251", "UTF-8")))
req
iconv("https://api.twitter.com/1.1/search/tweets.json?q=%23запарк", "cp1251", "UTF-8")
req <- with_config(twitter_token, curl("https://api.twitter.com/1.1/search/tweets.json?q=%23запарк"))
library(curl)
req <- with_config(twitter_token, curl("https://api.twitter.com/1.1/search/tweets.json?q=%23запарк"))
req
curl("https://api.twitter.com/1.1/search/tweets.json?q=%23запарк")
Sys.getlocale()
Sys.setlocale(category = "LC_ALL", locale = "ru_RU.UTF-8")
Sys.setlocale(locale = "ru_RU.UTF-8")
Sys.setlocale(category = "LC_CTYPE", locale = "ru_RU.UTF-8")
Sys.setlocale(category = "LC_CTYPE", locale = "russian")
Sys.setlocale(category = "LC_CTYPE", russian)
Sys.setlocale("LC_CTYPE", "russian")
req <- with_config(twitter_token, GET("https://api.twitter.com/1.1/search/tweets.json?q=%23запарк"))
library(twitteR)
library(httr)
library(RCurl)
library(ggplot2)
library(plyr)
library(dplyr)
library(ggmap)
library(reshape2)
req <- with_config(twitter_token, GET("https://api.twitter.com/1.1/search/tweets.json?q=%23запарк"))
zapros <- "https://api.twitter.com/1.1/search/tweets.json?q=%23запарк"
Encoding(zapros) <- "UTF-8"
req <- with_config(twitter_token, GET(zapros))
Encoding(zapros) <- "UTF8"
req <- with_config(twitter_token, GET(zapros))
zapros
req$url
Encoding(zapros) <- "UTF-8"
req <- with_config(twitter_token, GET(zapros))
zapros
iconv(zapros, "cp1251", "UTF-8")
zapros <- iconv(zapros, "cp1251", "UTF-8")
req <- with_config(twitter_token, GET(zapros))
req$url
Encoding(zapros)
zapros <- iconv(zapros, "cp1251", "latin1")
zapros
conn <- curl(zapros)
library(curl)
conn <- curl(zapros)
wall_get <- readLines(conn, warn = FALSE)
conn
zapros <- "https://api.twitter.com/1.1/search/tweets.json?q=%23запарк"
zapros <- iconv(zapros, "cp1251", "UTF-8")
conn <- curl(zapros)
wall_get <- readLines(conn, warn = FALSE)
conn
req <- with_config(twitter_token, GET(zapros, encoding = "UTF-8"))
word <- "парк"
word <- "запарк"
library(twitteR)
library(httr)
library(RCurl)
word <- curlEscape(word)
apiKey <- "nwGAf5EXNXJ7zxU86cn1amLuY"
apiSecret <- "rJZCAJSIbutGuiaDhO3FgTrw2nwDOFyQEhH5Le0bi6fRliUxk5"
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
zapros <- paste0("https://api.twitter.com/1.1/search/tweets.json?q=%23",word)
searchTwitter(word,n=1000, geocode=search_terms[i,"latlong"], lang="ru")
zapros
searchTwitter(zapros,n=1000, geocode=search_terms[i,"latlong"], lang="ru")
searchTwitter(zapros,n=1000, lang="ru")
access_token <- "114297502-BXqpFuIqdJ6mqRqfDLEEEXtZljoa6enN9m4sHC53"
access_token_secret <- "1F0t7xFfFy7ofkjZQyEIwbLKA0EZoemihDI1f6fI2kVFV"
setup_twitter_oauth(apiKey,apiSecret,access_token,access_token_secret)
apiKey <- "5ijhfi2ALa8JNCUp4Cd4Ntbxs"
apiSecret <- "HWSIAhl6sYWqkFxfCZFIaHttyRXt6iy9Ikhp1FVOPIhAKD0tM6"
setup_twitter_oauth(apiKey,apiSecret,access_token,access_token_secret)
library(twitteR)
setup_twitter_oauth(apiKey,apiSecret,access_token,access_token_secret)
searchTwitter(zapros,n=1000, lang="ru")
word <- paste0(word,"%23")
searchTwitter(word,n=1000, lang="ru")
req <- searchTwitter(word,n=50, lang="ru")
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
twListToDF(req)
req$text
req$getText()
req$getText
word
word <- "%23%E7%E0%EF%E0%F0%EA"
req <- searchTwitter(word,n=50, lang="ru")
twListToDF(req)
word
encodeString(word)
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
twitter_token <- config(token=tw_token)
zapros
base <- "https://api.twitter.com/1.1/search/tweets.json?q="
word_enc <- curlEscape(word)
?curlEscape
curlUnescape(word)
curlEscape(paste0(base,word))
zapros <- paste0(base,word_enc)
zapros
res <- with_config(twitter_token, GET(zapros))
res
library(jsonlite)
res_json <- fromJSON(res)
res_json <- fromJSON(toJSON(content(res)))
res_json$errors$message
zapros
tw = searchTwitter(word_enc,n=50,lang="ru")
word
tw = searchTwitter(word,n=50,lang="ru")
twListToDF(tw)
curlUnescape(word)
Encoding(word)
Encoding(word) <- "UTF-8"
tw = searchTwitter(word,n=50,lang="ru")
twListToDF(tw)
zapros <- paste0(base,word)
res <- with_config(twitter_token, GET(zapros))
res_json <- fromJSON(toJSON(content(res)))
res$url
res$content
res$status_code
res$headers
res$times
res$cookies$flag
res$content
res$all_headers
res$url
res$status_code
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp, type = "application/x-www-form-urlencoded")
?config
res <- with_config(twitter_token, GET(zapros, encode =))
res <- with_config(twitter_token, GET(zapros))
res_json <- fromJSON(toJSON(content(res, as = "application/x-www-form-urlencoded")))
res_json <- fromJSON(toJSON(content(res)))
res_json$errors$message
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
twitter_token <- config(token=tw_token)
base <- "https://api.twitter.com/1.1/search/tweets.json?q="
word <- "#запарк"
word_enc <- curlEscape(word)
zapros <- paste0(base,word)
res <- with_config(twitter_token, GET(zapros))
res_json <- fromJSON(toJSON(content(res)))
res_json$errors$message
zapros
word_enc <- curlEscape(word)
zapros <- paste0(base,word_enc)
res <- with_config(twitter_token, GET(zapros))
res_json <- fromJSON(toJSON(content(res)))
res_json$errors$message
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
twitter_token <- config(token=tw_token)
base <- "https://api.twitter.com/1.1/search/tweets.json?q="
word <- "#запарк"
word_enc <- curlEscape(word)
zapros <- paste0(base,word_enc)
res <- with_config(twitter_token, GET(zapros))
res_json <- fromJSON(toJSON(content(res)))
res_json$errors$message
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
twitter_token <- config(token=tw_token)
base <- "https://api.twitter.com/1.1/search/tweets.json?q="
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
twitter_token <- config(token=tw_token)
base <- "https://api.twitter.com/1.1/search/tweets.json?q="
word <- "#запарк"
word_enc <- curlEscape(word)
zapros <- paste0(base,word_enc)
res <- with_config(twitter_token, GET(zapros))
res_json <- fromJSON(toJSON(content(res)))
res_json$errors$message
apiKey <- "5ijhfi2ALa8JNCUp4Cd4Ntbxs"
apiSecret <- "HWSIAhl6sYWqkFxfCZFIaHttyRXt6iy9Ikhp1FVOPIhAKD0tM6"
access_token <- "114297502-BXqpFuIqdJ6mqRqfDLEEEXtZljoa6enN9m4sHC53"
access_token_secret <- "1F0t7xFfFy7ofkjZQyEIwbLKA0EZoemihDI1f6fI2kVFV"
setup_twitter_oauth(apiKey,apiSecret,access_token,access_token_secret)
tw = searchTwitter(word_enc,n=50,lang="ru")
twListToDF(tw)
res <- with_config(twitter_token, GET(zapros, handle = "twitter"))
res <- with_config(twitter_token, GET(zapros))
res_json <- fromJSON(toJSON(content(res)))
res_json
twapp <- oauth_app("twappinfo", access_token, access_token_secret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
twitter_token <- config(token=tw_token)
base <- "https://api.twitter.com/1.1/search/tweets.json?q="
word <- "#запарк"
word_enc <- curlEscape(word)
zapros <- paste0(base,word_enc)
res <- with_config(twitter_token, GET(zapros))
res_json <- fromJSON(toJSON(content(res)))
res_json
res <- GET(zapros, config = twitter_token)
res_json <- fromJSON(toJSON(content(res)))
res_json$errors
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
base <- "https://api.twitter.com/1.1/search/tweets.json?q="
word <- "#запарк"
word_enc <- curlEscape(word)
zapros <- paste0(base,word_enc)
res <- GET(zapros, config = twitter_token)
res_json <- fromJSON(toJSON(content(res)))
res_json$errors
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
twitter_token <- config(token=tw_token)
res <- GET(zapros, config = twitter_token)
res <- GET(zapros, config = config(tw_token))
res_json <- fromJSON(toJSON(content(res)))
res_json
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
twitter_token <- config(token=tw_token)
res <- GET(zapros, config = config(tw_token))
res_json <- fromJSON(toJSON(content(res)))
res_json
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
res <- GET(zapros, config = config(tw_token))
res_json <- fromJSON(toJSON(content(res)))
res_json
config(tw_token)
apiKey <- "YMK6hg44dzNQlOTZDKG4apX39"
apiSecret <- "UnNuqNBJnCBI5wx1mo8KVfP4SYERahnXYD5OaX8XY5R4ZHziml"
twapp <- oauth_app("twappinfo", apiKey, apiSecret)
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
res <- GET(zapros, config = config(tw_token))
res_json <- fromJSON(toJSON(content(res)))
res_json
tw_token
GET(zapros, config = config(tw_token))
fromJSON(toJSON(content(GET(zapros, config = config(tw_token)))))
setup_twitter_oauth(apiKey,apiSecret)
tw = searchTwitter(word_enc,n=50,lang="ru")
twListToDF(tw)
Encoding(word) <- "UTF-8"
Encoding(word) <- "cp1251"
Encoding(word) <- "utf-8"
Encoding(word) <- "utf-8"
tw = searchTwitter(word_enc,n=50,lang="ru")
twListToDF(tw)
tw = searchTwitter(word,n=50,lang="ru")
twListToDF(tw)
tw = searchTwitter(word,n=10)
tw = searchTwitter(word,n=10,lang = "ru")
r <- twListToDF(tw)
r$text
word
curlUnescape(word)
tw = searchTwitter(curlEscape(word),n=10,lang = "ru")
r <- twListToDF(tw)
r$text
tw = searchTwitter(curlEscape(word),n=10)
Encoding(word)
word <- iconv(word, "cp1251", "utf-8")
word <- iconv(word, "cp1251", "UTF-8")
word <- "#запарк"
word <- iconv(word, "cp1251", "UTF-8")
tw = searchTwitter(word,n=10)
r <- twListToDF(tw)
r$text
tw_token <- oauth1.0_token(oauth_endpoints("twitter"), twapp)
word_enc <- curlEscape(word)
zapros <- paste0(base,word_enc)
res <- GET(zapros, config = config(tw_token))
res_json <- fromJSON(toJSON(content(res)))
res_json
word <- "#запаркнаходынке"
word <- iconv(word, "cp1251", "UTF-8")
tw = searchTwitter(word,n=10)
word <- "#паркукронштадтскогобульвара"
word <- iconv(word, "cp1251", "UTF-8")
tw = searchTwitter(word,n=10)
r <- twListToDF(tw)
r
r$created
r$screenName
tw = searchTwitter(word,n=10,lang = "ru")
word <- iconv(word, "cp1251", "UTF-8")
tw = searchTwitter(word,n=10,lang = "ru")
tw = searchTwitter(word,n=50,lang = "ru")
word <- "#паркдубки"
word <- iconv(word, "cp1251", "UTF-8")
tw = searchTwitter(word,n=50,lang = "ru")
r <- twListToDF(tw)
r$text
library(shiny)
install.packages("shiny")
library(manipulate)
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot()
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
abline(0, 2)
abline(0, 3)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
data("airquality")
require(rCharts)
install.packages("rCharts")
dTable(airquality, sPaginationType = "full_numbers")
require(devtools)
install_github('rCharts', 'ramnathv')
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
install_github("ramnathv/rCharts")
require(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
setwd("D:/Research/DataProducts")
library(UsingR)
install.packages("Using.R")
data(galton)
install.packages("Using.R")
install.packages("HistData")
library(HistData)
data(galton)
data(Galton)
runApp()
runApp()
runApp()
runApp()
runApp()
